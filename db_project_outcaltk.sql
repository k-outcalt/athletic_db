/*
	Personal Database Project
    Volleyball Practice Statistics
    Katherine Outcalt
    3.3.2021
*/

-- use my database for 3300
use km_outcaltk;
/*
	Drop Tables first (existence dependent to existence independent)
*/
DELIMITER $$
DROP PROCEDURE IF EXISTS SP_DROP_TABLES$$
CREATE PROCEDURE SP_DROP_TABLES ()
BEGIN
-- drop dependent entities
	DROP TABLE IF EXISTS STAT; 
	DROP TABLE IF EXISTS PLAYERDRILL; 
	DROP TABLE IF EXISTS DRILL;
	DROP TABLE IF EXISTS PLAYERPOSITION;
	DROP TABLE IF EXISTS PRACTICE;
	DROP TABLE IF EXISTS PLAYER;
	DROP TABLE IF EXISTS COACH;

	-- drop independent entities
	DROP TABLE IF EXISTS PERSON;
	DROP TABLE IF EXISTS POSITION;
	DROP TABLE IF EXISTS STATCATEGORY;
	DROP TABLE IF EXISTS DRILLCATEGORY;
END$$
/*
	Create Tables (existence independent first)
*/

DROP PROCEDURE IF EXISTS SP_CREATE_TABLES$$
CREATE PROCEDURE SP_CREATE_TABLES ()
BEGIN
	-- create Person table
	CREATE TABLE IF NOT EXISTS PERSON (
	PERSON_ID int AUTO_INCREMENT PRIMARY KEY,
	PERSON_NAME_FIRST VARCHAR(50),
	PERSON_NAME_LAST VARCHAR(50) NOT NULL
	);

	-- create Position table
	CREATE TABLE IF NOT EXISTS POSITION (
	POSITION_ID int AUTO_INCREMENT PRIMARY KEY,
	POSITION_TITLE VARCHAR(50) NOT NULL UNIQUE,
	POSITION_ACRONYM CHAR(3) UNIQUE
	);

	-- create Statcategory table
	CREATE TABLE IF NOT EXISTS STATCATEGORY (
	STATCATEGORY_ID int AUTO_INCREMENT PRIMARY KEY,
	STATCATEGORY_TITLE VARCHAR(50) NOT NULL UNIQUE
	);

	-- create Drillcategory table
	CREATE TABLE IF NOT EXISTS DRILLCATEGORY (
	DRILLCATEGORY_ID int AUTO_INCREMENT PRIMARY KEY,
	DRILLCATEGORY_TITLE VARCHAR(50) NOT NULL UNIQUE
	);

/*
	Create Tables (existence dependent second)
*/

	-- create Player table
	CREATE TABLE IF NOT EXISTS PLAYER (
	PLAYER_ID int AUTO_INCREMENT,
	PERSON_ID int,
	FOREIGN KEY (PERSON_ID) REFERENCES PERSON(PERSON_ID),
	PRIMARY KEY (PLAYER_ID, PERSON_ID)
	);

	-- create Coach table
	CREATE TABLE IF NOT EXISTS COACH (
	COACH_ID int AUTO_INCREMENT,
	PERSON_ID int,
	FOREIGN KEY (PERSON_ID) REFERENCES PERSON(PERSON_ID),
	PRIMARY KEY (COACH_ID, PERSON_ID)
	);

	-- create Practice table
	CREATE TABLE IF NOT EXISTS PRACTICE (
	PRACTICE_ID int AUTO_INCREMENT PRIMARY KEY,
	COACH_ID int, 
	PRACTICE_DATE DATE NOT NULL,
	FOREIGN KEY (COACH_ID) REFERENCES COACH(COACH_ID)
	);

	-- create Playerposition table
	CREATE TABLE IF NOT EXISTS PLAYERPOSITION (
	PLAYERPOSITION_ID int AUTO_INCREMENT,
	PLAYER_ID int,
	POSITION_ID int,
	PLAYERPOSITION_START_DATE DATE,
	FOREIGN KEY (PLAYER_ID) REFERENCES PLAYER(PLAYER_ID),
	FOREIGN KEY (POSITION_ID) REFERENCES POSITION (POSITION_ID),
	PRIMARY KEY (PLAYERPOSITION_ID, PLAYER_ID, POSITION_ID)
	);

	-- create Drill table
	CREATE TABLE IF NOT EXISTS DRILL (
	DRILL_ID int AUTO_INCREMENT,
	PRACTICE_ID int,
	DRILLCATEGORY_ID int,
	DRILL_DURATION int,
	DRILL_TITLE VARCHAR(50) NOT NULL, 
	FOREIGN KEY (PRACTICE_ID) REFERENCES PRACTICE(PRACTICE_ID),
	FOREIGN KEY (DRILLCATEGORY_ID) REFERENCES DRILLCATEGORY(DRILLCATEGORY_ID),
	PRIMARY KEY (DRILL_ID, PRACTICE_ID, DRILLCATEGORY_ID)
	);

	-- create Playerdrill table
	CREATE TABLE IF NOT EXISTS PLAYERDRILL (
	PLAYERDRILL_ID int AUTO_INCREMENT,
	DRILL_ID int,
	PLAYER_ID int,
	FOREIGN KEY (DRILL_ID) REFERENCES DRILL(DRILL_ID),
	FOREIGN KEY (PLAYER_ID) REFERENCES PLAYER(PLAYER_ID),
	PRIMARY KEY (PLAYERDRILL_ID, DRILL_ID, PLAYER_ID)
	);

	-- create Stat table
	CREATE TABLE IF NOT EXISTS STAT (
	STAT_ID int AUTO_INCREMENT,
	PLAYERDRILL_ID int,
	STATCATEGORY_ID int,
	STAT_NUMBER float NOT NULL,
	FOREIGN KEY (PLAYERDRILL_ID) REFERENCES PLAYERDRILL(PLAYERDRILL_ID),
	FOREIGN KEY (STATCATEGORY_ID) REFERENCES STATCATEGORY(STATCATEGORY_ID),
	PRIMARY KEY (STAT_ID, PLAYERDRILL_ID)
	);
END
$$
DELIMITER ; 

/*
	Create Views 
*/
DELIMITER $$
DROP PROCEDURE IF EXISTS SP_CREATE_VIEWS$$
CREATE PROCEDURE SP_CREATE_VIEWS ()
BEGIN
	-- view for all players and their positions 
	CREATE OR REPLACE VIEW VIEW_PLAYERPOSITIONS_ALL AS
	SELECT
		POSITION_TITLE AS "Position", 
		CONCAT(PERSON.PERSON_NAME_FIRST, ' ', PERSON.PERSON_NAME_LAST) AS "PlayerName"
	FROM
		PLAYER
		INNER JOIN PERSON ON PLAYER.PERSON_ID = PERSON.PERSON_ID
        INNER JOIN PLAYERPOSITION ON PLAYERPOSITION.PLAYER_ID = PLAYER.PLAYER_ID
        INNER JOIN POSITION ON PLAYERPOSITION.POSITION_ID = POSITION.POSITION_ID
	ORDER BY 
		POSITION_TITLE ASC,
        PERSON_NAME_LAST ASC,
        PERSON_NAME_FIRST ASC; 
	
    -- view all drills
    CREATE OR REPLACE VIEW VIEW_DRILLS_ALL AS
    SELECT 
		DRILLCATEGORY_TITLE AS "DrillType",
        DRILL_TITLE AS "DrillName",
        PRACTICE_DATE AS "DatePlayed"
	FROM
		DRILLCATEGORY
        LEFT OUTER JOIN DRILL ON DRILLCATEGORY.DRILLCATEGORY_ID = DRILL.DRILLCATEGORY_ID
        LEFT OUTER JOIN PRACTICE ON DRILL.PRACTICE_ID = PRACTICE.PRACTICE_ID
	ORDER BY
		DRILLCATEGORY_TITLE ASC,
        DRILL_TITLE ASC,
        PRACTICE_DATE ASC; 
	
    -- view unfilled spots 
	CREATE OR REPLACE VIEW VIEW_UNFILLED_POSITIONS AS 
    SELECT
		POSITION_TITLE AS "Position"
	FROM
		POSITION
        LEFT OUTER JOIN PLAYERPOSITION ON PLAYERPOSITION.POSITION_ID = POSITION.POSITION_ID
	WHERE
		PLAYERPOSITION.POSITION_ID IS NULL; 
	
    -- get all practice data 
	CREATE OR REPLACE VIEW VIEW_STATS_ALL AS
    SELECT
		PRACTICE_DATE AS "Date",
		DRILL_TITLE AS "DrillName",
        STATCATEGORY_TITLE AS "StatType",
        STAT_NUMBER AS "Stat", 
        CONCAT(PERSON_NAME_FIRST, ',', PERSON_NAME_LAST) AS "Fullname"
	FROM
		PERSON
        INNER JOIN PLAYER ON PLAYER.PERSON_ID = PERSON.PERSON_ID
        INNER JOIN PLAYERDRILL ON PLAYERDRILL.PLAYER_ID = PLAYER.PLAYER_ID
        INNER JOIN STAT ON PLAYERDRILL.PLAYERDRILL_ID = STAT.PLAYERDRILL_ID
        INNER JOIN STATCATEGORY ON STAT.STATCATEGORY_ID = STATCATEGORY.STATCATEGORY_ID
        INNER JOIN DRILL ON PLAYERDRILL.DRILL_ID = DRILL.DRILL_ID
        INNER JOIN PRACTICE ON PRACTICE.PRACTICE_ID = DRILL.PRACTICE_ID
	ORDER BY
		PRACTICE_DATE ASC,
        DRILL_TITLE ASC,
        STATCATEGORY_TITLE ASC,
        STAT_NUMBER DESC,
        PERSON_NAME_LAST ASC; 
	
    -- top player 
    CREATE OR REPLACE VIEW VIEW_TOP_OFFENSIVE_PLAYER AS
    SELECT
		-- PERSON_NAME_LAST AS "PlayerName",
         CONCAT(PERSON_NAME_FIRST, ',', PERSON_NAME_LAST) AS "Fullname",
         STAT_NUMBER AS "TopScore" 
	FROM
		PERSON
        INNER JOIN PLAYER ON PLAYER.PERSON_ID = PERSON.PERSON_ID
        INNER JOIN PLAYERDRILL ON PLAYERDRILL.PLAYER_ID = PLAYER.PLAYER_ID
        INNER JOIN STAT ON PLAYERDRILL.PLAYERDRILL_ID = STAT.PLAYERDRILL_ID
        
	WHERE 
        STAT_NUMBER = (
			SELECT MAX(STAT_NUMBER) 
            FROM STAT 
            INNER JOIN PLAYERDRILL ON STAT.PLAYERDRILL_ID = PLAYERDRILL.PLAYERDRILL_ID 
			INNER JOIN DRILL ON DRILL.DRILL_ID = PLAYERDRILL.DRILL_ID
            INNER JOIN DRILLCATEGORY WHERE DRILLCATEGORY.DRILLCATEGORY_ID = DRILL.DRILLCATEGORY_ID);
            
END$$
DELIMITER ; 

/*
	Stored procedures for inserting data into tables
*/
/*
	Insert into person based tables first 
*/

DELIMITER $$
-- SP for inserting into Person
DROP PROCEDURE IF EXISTS SP_INSERT_PERSON$$
CREATE PROCEDURE SP_INSERT_PERSON (IN P_NAME_FIRST VARCHAR(50), IN P_NAME_LAST VARCHAR(50))
BEGIN
	INSERT INTO PERSON (PERSON_NAME_FIRST, PERSON_NAME_LAST)
    SELECT 
		P_NAME_FIRST, 
        P_NAME_LAST
    WHERE 
		NOT EXISTS (SELECT PERSON_ID FROM PERSON WHERE PERSON_NAME_FIRST = P_NAME_FIRST AND PERSON_NAME_LAST = P_NAME_LAST);
END$$



DELIMITER $$
-- SP for inserting into Coach
DROP PROCEDURE IF EXISTS SP_INSERT_COACH$$
CREATE PROCEDURE SP_INSERT_COACH (IN P_NAME_FIRST VARCHAR(50), IN P_NAME_LAST VARCHAR(50))
BEGIN
	INSERT INTO COACH (PERSON_ID)
	SELECT 
		PERSON.PERSON_ID
	FROM 
		PERSON
        LEFT OUTER JOIN COACH ON PERSON.PERSON_ID = COACH.PERSON_ID
	WHERE 
		PERSON.PERSON_ID = (SELECT PERSON_ID FROM PERSON WHERE PERSON.PERSON_NAME_FIRST = P_NAME_FIRST AND PERSON.PERSON_NAME_LAST = P_NAME_LAST)
        AND COACH.PERSON_ID IS NULL;
END$$

-- SP for inserting into Player
DELIMITER $$
DROP PROCEDURE IF EXISTS SP_INSERT_PLAYER$$
CREATE PROCEDURE SP_INSERT_PLAYER (IN P_NAME_FIRST VARCHAR(50), IN P_NAME_LAST VARCHAR(50))
BEGIN
	INSERT INTO PLAYER(PERSON_ID)
    SELECT 
		PERSON.PERSON_ID
    FROM 
		PERSON
		LEFT OUTER JOIN PLAYER ON PERSON.PERSON_ID = PLAYER.PERSON_ID
    WHERE 
		PERSON.PERSON_ID = (SELECT PERSON_ID FROM PERSON WHERE PERSON.PERSON_NAME_FIRST = P_NAME_FIRST AND PERSON.PERSON_NAME_LAST = P_NAME_LAST)
		AND PLAYER.PERSON_ID IS NULL;
END$$

DELIMITER ; 

/* 
	insert into lookup tables (Position, Statcategory, Drillcategory)
*/

DELIMITER $$
-- insert into Position table: title, acryonym
DROP PROCEDURE IF EXISTS SP_POPULATE_POSITIONS$$
CREATE PROCEDURE SP_POPULATE_POSITIONS ()
BEGIN 
	INSERT INTO POSITION (POSITION_TITLE, POSITION_ACRONYM)
	VALUES
		("Outside Hitter", "OH"),
		("Setter", "S"),
		("Libero", "L"),
		("Opposite", "OP"),
		("Middle Blocker", "MB"),
		("Defensive Specialist", "DS");
END$$ 

-- insert into StatCategory table
DROP PROCEDURE IF EXISTS SP_POPULATE_STATCATEGORY$$
CREATE PROCEDURE SP_POPULATE_STATCATEGORY ()
BEGIN
	INSERT INTO STATCATEGORY (STATCATEGORY_TITLE)
	VALUES 
		("Points"),
		("Games Won"),
		("Team Rank"),
		("Hitting percentage");
END$$

-- insert into DrillCategory table
DROP PROCEDURE IF EXISTS SP_POPULATE_DRILLCATEGORY$$
CREATE PROCEDURE SP_POPULATE_DRILLCATEGORY ()
BEGIN
	INSERT INTO DRILLCATEGORY (DRILLCATEGORY_TITLE) 
	VALUES
		("Offense"),
		("Defense"),
		("Scrimmage"),
		("Serve/Receive");
END$$
DELIMITER ; 

/*
	Create stored procedures inserting into bridging entities 
*/

-- insert a player and their position into playerposition
DELIMITER $$
DROP PROCEDURE IF EXISTS SP_INSERT_PLAYERPOSITION$$
CREATE PROCEDURE SP_INSERT_PLAYERPOSITION (IN P_NAME_FIRST VARCHAR(50), IN P_NAME_LAST VARCHAR(50), IN P_TITLE VARCHAR(50), IN START_DATE DATE)
BEGIN
START TRANSACTION;
	 -- check for player existence
	SET @PL_ID = 0; 
    SELECT PLAYER_ID INTO @PL_ID
    FROM
		PLAYER 
        INNER JOIN PERSON ON PLAYER.PERSON_ID = PERSON.PERSON_ID
	WHERE
		PERSON_NAME_FIRST = P_NAME_FIRST AND
        PERSON_NAME_LAST = P_NAME_LAST; 
	
    -- check for position existence
    SET @PO_ID = 0; 
    SELECT POSITION_ID INTO @PO_ID
	FROM 
		POSITION
	WHERE
		POSITION_TITLE = P_TITLE; 
	
    -- check to make sure the player + postion combo doesn't already exist 
	SET @PP_ID = 0;
    SELECT PLAYERPOSITION_ID INTO @PP_ID
    FROM
		PLAYERPOSITION
	WHERE 
		PLAYERPOSITION.PLAYER_ID = @PL_ID 
		AND PLAYERPOSITION.POSITION_ID = @PO_ID; 
	
    -- insert if conditions are met
    IF (@PL_ID = 0) OR (@PO_ID = 0) OR (@PP_ID <> 0)
    THEN 
		ROLLBACK; 
	ELSE
    
	INSERT INTO PLAYERPOSITION (PLAYER_ID, POSITION_ID, PLAYERPOSITION_START_DATE)  
    SELECT 
		@PL_ID, 
        @PO_ID, 
        START_DATE; 
        
	END IF; 
COMMIT; 
END$$
DELIMITER ; 

-- stored procedure to insert into Practice table given a coach's name and date
DELIMITER $$
DROP PROCEDURE IF EXISTS SP_INSERT_PRACTICE$$
CREATE PROCEDURE SP_INSERT_PRACTICE (IN COACH_NAME_FIRST VARCHAR(50), IN COACH_NAME_LAST VARCHAR(50), IN P_DATE DATE)
BEGIN
	START TRANSACTION; 
    -- check for coach existence
    SET @C_ID = 0; 
    SELECT COACH_ID INTO @C_ID
    FROM
		COACH
		INNER JOIN PERSON ON COACH.PERSON_ID = PERSON.PERSON_ID
	WHERE
		PERSON_NAME_FIRST = COACH_NAME_FIRST AND
        PERSON_NAME_LAST = COACH_NAME_LAST; 
	
    -- check if practice already exists
    SET @PR_ID = 0; 
    SELECT PRACTICE_ID INTO @PR_ID
    FROM 
		PRACTICE
	WHERE
		PRACTICE.PRACTICE_DATE = P_DATE AND
        PRACTICE.COACH_ID = @C_ID; 
	
    IF (@C_ID = 0) OR (@PR_ID <> 0)
    THEN 
		ROLLBACK; 
	ELSE 
    
    INSERT INTO PRACTICE (COACH_ID, PRACTICE_DATE)
    SELECT
		@C_ID,
        P_DATE; 
	END IF; 
    
    COMMIT; 
END$$
DELIMITER ; 

-- stored procedure to insert a drill into a practice (for a given practice date) 
DELIMITER $$
DROP PROCEDURE IF EXISTS SP_INSERT_DRILL$$
CREATE PROCEDURE SP_INSERT_DRILL (IN P_DATE DATE, IN D_CATEGORY VARCHAR(50), IN TOTAL_TIME INT, IN D_TITLE VARCHAR(50))
BEGIN
	START TRANSACTION; 
    -- check for practice existence first
    SET @PR_ID = 0; 
    SELECT PRACTICE_ID INTO @PR_ID
    FROM 
		PRACTICE
	WHERE 
		PRACTICE_DATE = P_DATE;
	
    -- check for drillcategory existence first
	SET @DC_ID = 0;
    SELECT DRILLCATEGORY_ID INTO @DC_ID
    FROM 
		DRILLCATEGORY
	WHERE
		DRILLCATEGORY_TITLE = D_CATEGORY; 
	
    -- check if drill alredy exists
    SET @DR_ID = 0;
    SELECT DRILL_ID INTO @DR_ID
    FROM
		DRILL
	WHERE
		DRILL.PRACTICE_ID = @PR_ID AND
        DRILL.DRILLCATEGORY_ID = @DC_ID; 
    
    IF (@PR_ID = 0) OR (@DC_ID = 0) OR (@DR_ID <> 0)
    THEN
		ROLLBACK; 
	ELSE 
    
    INSERT INTO DRILL (PRACTICE_ID, DRILLCATEGORY_ID, DRILL_DURATION, DRILL_TITLE)
    SELECT
		@PR_ID,
        @DC_ID,
        TOTAL_TIME,
        D_TITLE; 
    END IF; 
	COMMIT; 
END$$
DELIMITER ; 

-- stored procedure to insert into playerdrill, meaning to register a player who competed in a particular drill 
DELIMITER $$
DROP PROCEDURE IF EXISTS SP_INSERT_PLAYERDRILL$$
CREATE PROCEDURE SP_INSERT_PLAYERDRILL (IN P_NAME_FIRST VARCHAR(50), IN P_NAME_LAST VARCHAR(50), IN P_DATE DATE, IN D_TITLE VARCHAR(50))
BEGIN
	START TRANSACTION; 
    -- check for player existence
    SET @PL_ID = 0; 
    SELECT PLAYER_ID INTO @PL_ID
    FROM
		PLAYER 
        INNER JOIN PERSON ON PLAYER.PERSON_ID = PERSON.PERSON_ID
	WHERE
		PERSON_NAME_FIRST = P_NAME_FIRST AND
        PERSON_NAME_LAST = P_NAME_LAST; 
        
    -- check for drill existence
    SET @DR_ID = 0;
    SELECT DRILL_ID INTO @DR_ID
    FROM
		DRILL
	WHERE
		DRILL.PRACTICE_ID = (SELECT PRACTICE_ID FROM PRACTICE WHERE PRACTICE_DATE = P_DATE) AND
        DRILL.DRILL_TITLE = D_TITLE; 
        
    -- check for duplicates of playerdrill
    SET @PLDR_ID = 0; 
    SELECT PLAYERDRILL_ID INTO @PLDR_ID
    FROM 
		PLAYERDRILL
	WHERE
		PLAYER_ID = @PL_ID AND
        DRILL_ID = @DR_ID; 
	
    IF (@PL_ID = 0) OR (@DR_ID = 0) OR (@PLDR_ID <> 0)
    THEN 
		ROLLBACK;
	ELSE
	
    INSERT INTO PLAYERDRILL (DRILL_ID, PLAYER_ID)
    SELECT
		@DR_ID,
        @PL_ID; 
    END IF; 
    
    COMMIT; 
END$$
DELIMITER ; 

-- stored procedure to insert into stat, which is one piece of data for a player's performance in particular drill
DELIMITER $$
DROP PROCEDURE IF EXISTS SP_INSERT_STAT$$
CREATE PROCEDURE SP_INSERT_STAT (IN P_NAME_FIRST VARCHAR(50), IN P_NAME_LAST VARCHAR(50), IN P_DATE DATE, IN D_TITLE VARCHAR(50), IN SC_TITLE VARCHAR(50), IN S_NUMBER FLOAT)
BEGIN
	START TRANSACTION; 
    
    -- check for playerdrill existence (with player, drill title, and practice date)
    SET @PLDR_ID = 0;
    SELECT PLAYERDRILL_ID INTO @PLDR_ID
    FROM 
		PERSON
		INNER JOIN PLAYER ON PERSON.PERSON_ID = PLAYER.PERSON_ID
        INNER JOIN PLAYERDRILL ON PLAYERDRILL.PLAYER_ID = PLAYER.PLAYER_ID
        INNER JOIN DRILL ON PLAYERDRILL.DRILL_ID = DRILL.DRILL_ID
        INNER JOIN PRACTICE ON DRILL.PRACTICE_ID = PRACTICE.PRACTICE_ID
	WHERE
		PERSON_NAME_FIRST = P_NAME_FIRST AND
        PERSON_NAME_LAST = P_NAME_LAST AND
        PRACTICE_DATE = P_DATE AND
        DRILL_TITLE = D_TITLE; 
    
    -- check for statcategory existence
    SET @SC_ID = 0;
    SELECT STATCATEGORY_ID INTO @SC_ID
    FROM 
		STATCATEGORY
	WHERE
		STATCATEGORY_TITLE = SC_TITLE; 
    
    -- check if stat already exists (duplicate data)
    SET @ST_ID = 0;
    SELECT STAT_ID INTO @ST_ID
    FROM 
		STAT
	WHERE
		PLAYERDRILL_ID = @PLDR_ID; 
	
    IF (@PLDR_ID = 0) OR (@SC_ID = 0) OR (@ST_ID <> 0)
    THEN
		ROLLBACK;
	ELSE
    
    INSERT INTO STAT (PLAYERDRILL_ID, STATCATEGORY_ID, STAT_NUMBER)
    SELECT
		@PLDR_ID,
        @SC_ID,
        S_NUMBER; 
	END IF; 
    COMMIT; 
END$$
DELIMITER ; 

-- delete a statistic if entered incorrectly
DELIMITER $$
DROP PROCEDURE IF EXISTS SP_DELETE_STAT$$
CREATE PROCEDURE SP_DELETE_STAT (IN P_NAME_FIRST VARCHAR(50), IN P_NAME_LAST VARCHAR(50), 
	IN P_DATE DATE, IN D_TITLE VARCHAR(50), IN SC_TITLE VARCHAR(50), IN S_NUMBER FLOAT)
BEGIN
START TRANSACTION; 
	-- check for existence of the stat 
    SET @ST_ID = 0;
    SELECT STAT_ID INTO @ST_ID
    FROM
		STATCATEGORY
        INNER JOIN STAT ON STAT.STATCATEGORY_ID = STATCATEGORY.STATCATEGORY_ID
        INNER JOIN PLAYERDRILL ON STAT.PLAYERDRILL_ID = PLAYERDRILL.PLAYERDRILL_ID
        INNER JOIN DRILL ON PLAYERDRILL.DRILL_ID = DRILL.DRILL_ID
        INNER JOIN PRACTICE ON DRILL.PRACTICE_ID = PRACTICE.PRACTICE_ID
        INNER JOIN PLAYER ON PLAYER.PLAYER_ID = PLAYERDRILL.PLAYER_ID
        INNER JOIN PERSON ON PERSON.PERSON_ID = PLAYER.PERSON_ID
	WHERE
		PERSON_NAME_LAST = P_NAME_LAST AND
        PERSON_NAME_FIRST = P_NAME_FIRST AND
        PRACTICE_DATE = P_DATE AND
        DRILL_TITLE = D_TITLE AND
        STATCATEGORY_TITLE = SC_TITLE AND
        STAT_NUMBER = S_NUMBER; 
	
    IF (@ST_ID = 0)
    THEN
		ROLLBACK; 
        
	ELSE 
    DELETE FROM STAT 
    WHERE 
		@ST_ID = STAT_ID; 
    
	END IF; 
COMMIT; 
END$$
DELIMITER ; 

-- insert into person, coach, player, and playerposition tables
DELIMITER $$
DROP PROCEDURE IF EXISTS SP_POPULATE_PERSONS$$
CREATE PROCEDURE SP_POPULATE_PERSONS ()
BEGIN
	-- insert into person
	CALL SP_INSERT_PERSON ("Katie", "Wilson");
	CALL SP_INSERT_PERSON ("Devin", "Callahan");
	CALL SP_INSERT_PERSON ("Hana", "Fulghum");
	CALL SP_INSERT_PERSON ("Chloe", "Loreen");
	CALL SP_INSERT_PERSON ("Kallin", "Spiller");
	CALL SP_INSERT_PERSON ("Caroline", "Evans");
	CALL SP_INSERT_PERSON ("Destiny", "Lockhart");
	CALL SP_INSERT_PERSON ("Molly", "Weik");

	-- insert into coach
	CALL SP_INSERT_COACH ("Katie", "Wilson"); 

	-- insert into player 
	CALL SP_INSERT_PLAYER ("Devin", "Callahan");
	CALL SP_INSERT_PLAYER ("Hana", "Fulghum");
	CALL SP_INSERT_PLAYER ("Chloe", "Loreen");
	CALL SP_INSERT_PLAYER ("Kallin", "Spiller");
	CALL SP_INSERT_PLAYER ("Caroline", "Evans");
	CALL SP_INSERT_PLAYER ("Destiny", "Lockhart");
	CALL SP_INSERT_PLAYER ("Molly", "Weik");

	-- insert into playerposition 
	CALL SP_INSERT_PLAYERPOSITION ("Devin", "Callahan", "Setter", DATE('2021-1-1')); 
	CALL SP_INSERT_PLAYERPOSITION ("Hana", "Fulghum", "Libero", DATE('2021-1-1')); 
	CALL SP_INSERT_PLAYERPOSITION ("Chloe", "Loreen", "Outside Hitter", DATE('2021-1-1')); 
	CALL SP_INSERT_PLAYERPOSITION ("Kallin", "Spiller", "Opposite", DATE('2021-1-1')); 
	CALL SP_INSERT_PLAYERPOSITION ("Caroline", "Evans", "Libero", DATE('2021-1-1')); 
	CALL SP_INSERT_PLAYERPOSITION ("Destiny", "Lockhart", "Middle Blocker", DATE('2021-1-1')); 
	CALL SP_INSERT_PLAYERPOSITION ("Molly", "Weik", "Middle Blocker", DATE('2021-1-1')); 
END$$ 

-- insert into practice
DROP PROCEDURE IF EXISTS SP_POPULATE_PRATCICE$$
CREATE PROCEDURE SP_POPULATE_PRACTICE ()
BEGIN 
	-- insert into practice
	CALL SP_INSERT_PRACTICE("Katie", "Wilson", DATE('2021-3-1')); 
    CALL SP_INSERT_PRACTICE("Katie", "Wilson", DATE('2021-3-3')); 
END$$

-- insert into drill
DROP PROCEDURE IF EXISTS SP_POPULATE_DRILL$$
CREATE PROCEDURE SP_POPULATE_DRILL()
BEGIN
	CALL SP_INSERT_DRILL (DATE('2021-3-1'), "Offense", 30, "Queens Court");
    CALL SP_INSERT_DRILL (DATE('2021-3-1'), "Scrimmage", 45, "4v4"); 
    
    CALL SP_INSERT_DRILL (DATE('2021-3-3'), "Serve/Receive", 40, "Ladder"); 
END $$

-- insert into playerdrill and the player's stat for that drill 
DROP PROCEDURE IF EXISTS SP_POPULATE_PLAYERDRILL$$
CREATE PROCEDURE SP_POPULATE_PLAYERDRILL ()
BEGIN 
	-- insert into playerdrill
	CALL SP_INSERT_PLAYERDRILL ("Devin", "Callahan", DATE('2021-3-1'), "Queens Court");
    CALL SP_INSERT_PLAYERDRILL ("Hana", "Fulghum", DATE('2021-3-1'), "Queens Court"); 
    CALL SP_INSERT_PLAYERDRILL ("Chloe", "Loreen", DATE('2021-3-1'), "Queens Court"); 
    CALL SP_INSERT_PLAYERDRILL ("Kallin", "Spiller", DATE('2021-3-1'), "Queens Court"); 
    CALL SP_INSERT_PLAYERDRILL ("Caroline", "Evans", DATE('2021-3-1'), "Queens Court"); 
    CALL SP_INSERT_PLAYERDRILL ("Destiny", "Lockhart", DATE('2021-3-1'), "Queens Court"); 
    CALL SP_INSERT_PLAYERDRILL ("Molly", "Weik", DATE('2021-3-1'), "Queens Court"); 
    
    CALL SP_INSERT_PLAYERDRILL ("Devin", "Callahan", DATE('2021-3-3'), "Ladder"); 
    CALL SP_INSERT_PLAYERDRILL ("Hana", "Fulghum", DATE('2021-3-3'), "Ladder"); 
    CALL SP_INSERT_PLAYERDRILL ("Chloe", "Loreen", DATE('2021-3-3'), "Ladder"); 
    CALL SP_INSERT_PLAYERDRILL ("Kallin", "Spiller", DATE('2021-3-3'), "Ladder"); 
    CALL SP_INSERT_PLAYERDRILL ("Caroline", "Evans", DATE('2021-3-3'), "Ladder"); 
    CALL SP_INSERT_PLAYERDRILL ("Destiny", "Lockhart", DATE('2021-3-3'), "Ladder"); 
    CALL SP_INSERT_PLAYERDRILL ("Molly", "Weik", DATE('2021-3-3'), "Ladder"); 
    
    CALL SP_INSERT_PLAYERDRILL ("Devin", "Callahan", DATE('2021-3-1'), "4v4");
    CALL SP_INSERT_PLAYERDRILL ("Hana", "Fulghum", DATE('2021-3-1'), "4v4"); 
    CALL SP_INSERT_PLAYERDRILL ("Chloe", "Loreen", DATE('2021-3-1'), "4v4"); 
    CALL SP_INSERT_PLAYERDRILL ("Kallin", "Spiller", DATE('2021-3-1'), "4v4"); 
    CALL SP_INSERT_PLAYERDRILL ("Caroline", "Evans", DATE('2021-3-1'), "4v4"); 
    CALL SP_INSERT_PLAYERDRILL ("Destiny", "Lockhart", DATE('2021-3-1'), "4v4"); 
    CALL SP_INSERT_PLAYERDRILL ("Molly", "Weik", DATE('2021-3-1'), "4v4"); 
END $$

DROP PROCEDURE IF EXISTS SP_POPULATE_STAT$$
CREATE PROCEDURE SP_POPULATE_STAT ()
BEGIN
	-- insert into stat 
	CALL SP_INSERT_STAT ("Devin", "Callahan", DATE('2021-3-1'), "Queens Court", "Points", 14.0); 
    CALL SP_INSERT_STAT ("Hana", "Fulghum", DATE('2021-3-1'), "Queens Court", "Points", 14.0); 
    CALL SP_INSERT_STAT ("Chloe", "Loreen", DATE('2021-3-1'), "Queens Court", "Points", 17.0); 
    CALL SP_INSERT_STAT ("Kallin", "Spiller", DATE('2021-3-1'), "Queens Court", "Points", 16.0); 
    CALL SP_INSERT_STAT ("Caroline", "Evans", DATE('2021-3-1'), "Queens Court", "Points", 13.0); 
    CALL SP_INSERT_STAT ("Destiny", "Lockhart", DATE('2021-3-1'), "Queens Court", "Points", 11.0); 
    CALL SP_INSERT_STAT ("Molly", "Weik", DATE('2021-3-1'), "Queens Court", "Points", 11.0); 
    
	CALL SP_INSERT_STAT ("Devin", "Callahan", DATE('2021-3-1'), "4v4", "Games Won", 4); 
    CALL SP_INSERT_STAT ("Hana", "Fulghum", DATE('2021-3-1'), "4v4", "Games Won", 5); 
    CALL SP_INSERT_STAT ("Chloe", "Loreen", DATE('2021-3-1'), "4v4", "Games Won", 8); 
    CALL SP_INSERT_STAT ("Kallin", "Spiller", DATE('2021-3-1'), "4v4", "Games Won", 6); 
    CALL SP_INSERT_STAT ("Caroline", "Evans", DATE('2021-3-1'), "4v4", "Games Won", 2); 
    CALL SP_INSERT_STAT ("Destiny", "Lockhart", DATE('2021-3-1'), "4v4", "Games Won", 3); 
    CALL SP_INSERT_STAT ("Molly", "Weik", DATE('2021-3-1'), "4v4", "Games Won", 1); 
    
	CALL SP_INSERT_STAT ("Devin", "Callahan", DATE('2021-3-3'), "Ladder", "Team Rank", 4); 
    CALL SP_INSERT_STAT ("Hana", "Fulghum", DATE('2021-3-3'), "Ladder", "Team Rank", 2); 
	CALL SP_INSERT_STAT ("Chloe", "Loreen", DATE('2021-3-3'), "Ladder", "Team Rank", 1);
	CALL SP_INSERT_STAT ("Kallin", "Spiller", DATE('2021-3-3'), "Ladder", "Team Rank", 1); 
	CALL SP_INSERT_STAT ("Caroline", "Evans", DATE('2021-3-3'), "Ladder", "Team Rank", 2); 
	CALL SP_INSERT_STAT ("Destiny", "Lockhart", DATE('2021-3-3'), "Ladder", "Team Rank", 3); 
	CALL SP_INSERT_STAT ("Molly", "Weik", DATE('2021-3-3'), "Ladder", "Team Rank", 3); 
    
    CALL SP_DELETE_STAT ("Devin", "Callahan", DATE('2021-3-3'), "Ladder", "Team Rank", 4); 
    
END $$
DELIMITER ; 

-- stored procedure to populate data for all entities 
DELIMITER $$
DROP PROCEDURE IF EXISTS SP_POPULATE_DATA$$
CREATE PROCEDURE SP_POPULATE_DATA ()
BEGIN
	
	CALL SP_POPULATE_POSITIONS; 
	CALL SP_POPULATE_STATCATEGORY;
	CALL SP_POPULATE_DRILLCATEGORY; 
    
    CALL SP_POPULATE_PERSONS; 
    CALL SP_POPULATE_PRACTICE;
    CALL SP_POPULATE_DRILL;
    CALL SP_POPULATE_PLAYERDRILL;
    CALL SP_POPULATE_STAT; 
    
END$$

DROP PROCEDURE IF EXISTS SP_CREATE_DATA$$
CREATE PROCEDURE SP_CREATE_DATA ()
BEGIN
	CALL SP_DROP_TABLES; 
    CALL SP_CREATE_TABLES; 
    CALL SP_CREATE_VIEWS; 
    CALL SP_POPULATE_DATA; 
END$$

DELIMITER $$
DROP PROCEDURE IF EXISTS SP_SHOW_RESULT$$
CREATE PROCEDURE SP_SHOW_RESULT()
BEGIN
	SELECT * FROM VIEW_PLAYERPOSITIONS_ALL; 
    SELECT * FROM VIEW_DRILLS_ALL; 
    SELECT * FROM VIEW_UNFILLED_POSITIONS;
    SELECT * FROM VIEW_STATS_ALL; 
    SELECT * FROM VIEW_TOP_OFFENSIVE_PLAYER;
END$$
DELIMITER ;

CALL SP_CREATE_DATA; 
CALL SP_SHOW_RESULT; 
